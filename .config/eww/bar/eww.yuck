(defvar eww "`which eww` -c $HOME/.config/eww/bar")
(defvar slideDuration "300ms")
;; TODO: mostrare workspace attivo
;; TODO: RightBox

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;         PowerMenu         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar power false) ; activates the revealer

(defwidget powerButtons []
    (box
        :class "powerButtons"
        :orientation "h"					
        :space-evenly "true"
        (button ; reboot
            :class "button-reboot"
            :tooltip "Reboot"
            :onclick "systemctl reboot"
            ""
        )
        (button ; suspend
            :class "button-suspend"
            :tooltip "Suspend"
            :onclick "systemctl suspend"
            ""
        )
        (button ; logout
            :class "button-logout"
            :tooltip "Log-out"
            :onclick "hyprland dispatch exit"
            ""
        )
        (button ; lock
            :class "button-lock"
            :tooltip "Lock Screen"
            :onclick "~/.config/hypr/lock.sh"
            ""
        )

    )
)

(defwidget powerMenu []
    (eventbox
        :onhover "${eww} update power=true"
        :onhoverlost "${eww} update power=false"
        (box
            :class "powerMenu"
            :orientation "h"
            :space-evenly "false"
            (button
                :class "button-off"
                :tooltip "Shutdown"
                :onclick "shutdown now"
                ""
            )
            (revealer	
                :transition "slideright"	
				:reveal power			 
				:duration "${slideDuration}"
                (powerButtons)
            )
        )
    )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;         Workspaces         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget workspaces []
    (box ;; da mettere in un literal + script
        :class "workspaces"
        :orientation "h"
        :halign "start"
        :space-evenly false
        (button
            :class "button-code"
            :onclick "hyprctl dispatch workspace 1"
            ""
        )
        (button
            :class "button-github"
            :onclick "hyprctl dispatch workspace 2"
            ""
        )
        (button
            :class "button-browser"
            :onclick "hyprctl dispatch workspace 3"
            ""
        )
        (button
            :class "button-explorer"
            :onclick "hyprctl dispatch workspace 4"
            ""
        )
        (button
            :class "button-spotify"
            :onclick "hyprctl dispatch workspace 5"
            ""
        )
    )
)


;; Date/Calendar

(defpoll time 
    :interval "5s"
    :initial `date +'{"hour":"%H","min":"%M"}'`
    `date +'{"hour":"%H","min":"%M"}'`
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;         Control Panel         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar volume false)
(deflisten volumeIcon :initial "" `tail -F ./tmp/vol`)
(defpoll currVolume :interval "1s" "./scripts/audio.sh get-volume")

(defwidget volumeWidget []
    (eventbox
        :onhover "${eww} update volume=true"
        :onhoverlost "${eww} update volume=false"
        (box
            :class "volumeBox"
            :orientation "h"   
            :space-evenly false
            (revealer
                :transition "slideleft"
                :reveal volume
                :duration "${slideDuration}"
                (scale    
                    :class "scale-volume"
                    :orientation "h"
                    :tooltip "Volume ${currVolume}%"
                    :max 101
                    :value "${currVolume}"
                    :min 0
                    :onchange "./scripts/audio.sh set-volume {}" 
                    :flipped true
                ) 
            )
            (button
                :class "button-volume"
                :onclick "pavucontrol &"
                volumeIcon
            )   
        )
    )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar mic false)
(deflisten micIcon :initial "" `tail -F ./tmp/mic`)  
(defpoll currMic :interval "0.5s" "./scripts/audio.sh get-mic")

(defwidget micWidget []
    (eventbox
        :onhover "${eww} update mic=true"
        :onhoverlost "${eww} update mic=false"
        (box
            :class "micBox"
            :orientation "h"   
            :space-evenly false
            (revealer
                :transition "slideleft"
                :reveal mic
                :duration "${slideDuration}"
                (scale    
                    :class "scale-mic"
                    :orientation "h"
                    :tooltip "Microphone ${currMic}%"
                    :max 101
                    :value "${currMic}"
                    :min 0
                    :onchange "./scripts/audio.sh set-mic {}" 
                    :flipped true
                ) 
            )
            (button
                :class "button-mic"
                :onclick "pavucontrol &"
                micIcon
            )   
        )
    )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defpoll wifiIcon :interval "1s" "scripts/wifi.sh icon")
(defpoll wifiName :interval "1s" "scripts/wifi.sh name")

(defwidget wifiWidget []
    (box 
        :class "wifiBox"
        :orientation "h"
        :space-evenly false
        (button
            :class "button-wifi"
            :onclick "alacritty -t float_alacritty --config-file /home/manuel/.config/alacritty/float_alacritty.yml -e nmtui &"
            wifiIcon
        )
        (label
            :class "label-wifi"
            :orientation "h"
            :text "${wifiName}"
        )
    )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar brightness false)
(defpoll currBrightness :interval "0.5s" "scripts/brightness.sh get")
(deflisten brightnessIcon :initial "" `tail -F ./tmp/gamma`)


(defwidget brightnessWidget []    
    (eventbox
        :onhover "${eww} update brightness=true"
        :onhoverlost "${eww} update brightness=false"
        (box
            :class "brightnessBox"
            :orientation "h"   
            :space-evenly false
            (revealer
                :transition "slideleft"
                :reveal brightness
                :duration "${slideDuration}"
                (scale    
                    :class "scale-brightness"
                    :orientation "h"
                    :tooltip "Brightness ${currBrightness}%"
                    :max 101
                    :value "${currBrightness}"
                    :min 20
                    :onchange "scripts/brightness.sh {}" 
                    :flipped true
                ) 
            )
            (button
                :class "button-brightness"
                :onclick "scripts/gamma.sh set"
                brightnessIcon
            )
        )
    )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget bluetoothWidget []
    (box
        :class "bluetoothBox"
        :orientation "h"   
        :space-evenly false
        (button
            :class "button-bluetooth"
            :onclick "blueman-manager &"
            ""
        )
    )
)

(defpoll batteryIcon :interval "5s" "scripts/battery.sh icon")
(defpoll batteryValue :interval "5s" "scripts/battery.sh percent")
(defpoll buttonStyle :interval "5s" "scripts/battery.sh button_style")
(defpoll labelStyle :interval "5s" "scripts/battery.sh label_style")

(defwidget batteryWidget []
    (box
        :class "batteryBox"
        :orientation "h"   
        :space-evenly false
        (button
            :class "button-battery"
            :onclick " "
            :style "${buttonStyle}" 
            batteryIcon
        )
        (label
            :class "label-battery"
            :orientation "h"
            :style "${labelStyle}"
            :text "${batteryValue}%"
        )
    )
)

(defwidget ControlPanel []
    (box 
        :orientation "h"
        :space-evenly false
        :class "ControlPanel"
        (volumeWidget)
        (micWidget)
        (wifiWidget)
        (brightnessWidget)
        (bluetoothWidget)
        (batteryWidget)
    )
) 


;; LeftBox
(defwidget LeftBox []
    (box
        :class "LeftBox"
        :orientation "h"
        :halign "start"
        :space-evenly false
        (powerMenu)
        (workspaces)
    )
)

;; CenterBox
(defwidget CenterBox []
    (box
        :class "CenterBox"
        :orientation "h"
        :halign "center"
        :space-evenly false
        (label  
            :class "hour" 
            :text "${time.hour} : ${time.min}"
        )
    )
)

;; RightBox
(defwidget RightBox []
    (box
        :class "RightBox"
        :orientation "h"
        :halign "end"
        :space-evenly false
        (ControlPanel)
    )
)




(defwidget bar []
    (centerbox   
        :class "bar"
        :orientation "h" 
        (LeftBox)
        (CenterBox)
        (RightBox)
    )
)


(defwindow bar
    :monitor 1
    :windowtype "dock"
    :geometry (geometry 
        :x "0%"
        :y "0%"
        :width "100%"
        :height "30px"
        :anchor "top center"
    )
    :reserve (struts :side "top" :distance "4%")
    :exclusive true
    :stacking "fg"
    (bar)
)
